# Group Images and Names
- This feature added backend support for the frontend feature that allows user to change group image and name 
- Found out the right Schema Pattern to add the new fields so that other Group threads like community and campus chat threads are also updated. 
- Add new Fields to the Ent Schema with right field types along with field validators. 
- Updated Sprocs. Sprocs are API that get data from msys(sqllite db of IOS) and write to entDB(backend DB) OR write data to msys
- We wanted gradients colors to be a in a DS where order of the color was essential and duplicates should be allowed.
- Went with String but added validators to mke sure the string is comma separated hexcolor codes
- ## BUG. Regression
    - After implementing group image and names, it was uncovered in initial dogfooding
    - That for community groups(whihc are like discard groups with strangers) when group image is added and then removed, the group image is set to two of the icon with any two participants profile pictures like in one to one personal groups
    - This is a  security issue because, we dont want profiel images of particicpants in community group be revealed
    - So after uncovering it, I took the default group icon image url and fixed the group image removal API to use this group icon for community groups

# IGD Android theme snippet
- This feature will make the theme launch implementation easy for android engineers by providing copyable code snippets
- In android code each theme needs to be stored with its theme features like background pciture, BG color, Font color , FOnt style, TEXT bubble color etcs.
- This was human prone and Engineers need to get each value from designers.
- So I created a tool called theme Manager , where designers can update all the theme features
- And Android coed snippet is autogenerated from these values, which android engineers can add it to their code to store the theme 
- Looked into fbandroid repo and Pull requests to find code used to launch a theme, that can be autogenerated on theme manager.
- Added copyable Android Code Snippet along with instructions on where to add the code in fbandroid repo, making it easy for client engineers to use it.
- Had to get the instructions from a android engineerm because there know better where the code should be added
- Reused and extended already implemented IGD IOS code for IGD android 
- Refactored the theme manager code.


# Emoji Skin Tone Project
- Back End POC for the project
 - Feature to add skin tones to emoji fro reactions tab
 - In swift emoji skin tones can be added easily by adding skin tone modifier code points the emoji code sequence
 - As for messenger we use objective C, we had to update our local device msys (sqllite)emoji table with skin tones
 - Adding skin tones was difficult because not all emojis have same patrern of code sequence
 - we we add skin tone modifier after base emoji (Like person or woman) we get skin otned emojis
 - Some emojis have two base emojis like persons kissing , couple emojis and some have one base emoji like detective etcs.,
 - SOme emojis were not skin tone compatible like hand shake , pregnant woman
 - SOme emojis had variation selector int heir code sequenece like detective emoji, woman with blonde hair (woman+variation selector+blonde hair). For these emojis skin tone variation s selector need to be replaced
 - So to resolve this categorized emojis in modifier- type 1, type 2(couples), non modifaible like apple, handshake
 - THen added skin tones after each emojis's base emoji. before that checked if emoji had variation selector, that case simply replaced it
 - ## Bug 1
    - emoji data source was wrong and some already skin toned emoji  eg:🧑🏾 -> applying skin tone gives unexpected result  , so had to filter it
 - ## Bug 2
    - Not all devices got synced with this new emojis with modifier types,
    - SO in the ios code when emoji modifier types was accessed it gave null for unsynced emoji , so it have NPE error
    - SO I had to do a emergency remediation sync, updated table sproc is ran on all the devices
- ## Difficult Peer
    - My ios engineer peer for the project, did not communicate the problems she had correctly
    - she said something like "some emojis are  wierd" . when she should have given sent the emoji for me to check
    - She would n't check properly form her side. Like once a emoji is fixed, she wouldn't update the app and give feeback on stale data
- ## Scoping
    - we wanted the emojis kin tones to be applied for only couples and single base emojis, 
    - couple emojis will generate 5*5 = 25 skin toned emojis
    - there were also family emojis with 3 or 4 base emojis 5^4 and 5^3 - I did not want to included them because I scoped the project for MVP
    - Also for hte reaction tab adding skin tones for rarely used family emojis did not feel necessary
- ## Mistake
	- I need to check a emoji’s code belongs to a certain range to find out if its base emoji (in order to apply skin tone modifier)
	- Existing method checked for hex codes of the emojis and I had decimal code as input
	- So I duplicated  the same method with the decimal code ranges which can be error prone because I thought conversion(dec to hex) would be a extra step
	- Mistake - But dexcode also works for the hex code method and I did not had to duplicate it.


# Theme Release Management
- ## Scoping
    - Initially made a complex design like stored diff_ids/PR_ids of themes release diffs and PRs to Ent Theme and check their status and update the release status of the theme
    - for eg: when a Diff to send  to dogfooding is accepted, we update theme release status from development to dogfooding
    - Not necessary , and thought stupid to reinvetn the wheel
- Context:
    - Make designers and project managers independent by adding the emojis