/*
You have been tasked with parsing menus from a large restaurant group. Each menu is streamed to clients via a provided interface. You must design object(s) that represents a menu and can be hydrated with data from the provided interface. Your design should contain an appropriate class structure to contain the parsed data, as well as a function or set of functions to perform the parsing.

Consumers will use your object(s) to access a complete representation of the data sent by the menu stream after it has finished loading. Your objects should provide easy access to the full representation of the menu. The order of the data and linked objects is important.

The menu stream represents a list of menu items. Each item in the stream is a menu item, and each item will be separated by an empty string. The attributes of each item are as follows


Line 0: The ID of the item
Line 1: The item type, either CATEGORY, ENTREE or OPTION
Line 2: The name of the item
Line 3: The price of the item for ENTREE and OPTION. Not present for CATEGORY items.
Additional Lines: Item IDs that are linked to the current item. OPTIONs  do not have any linked items.




4                <-- id of the entity
ENTREE           <-- type
Spaghetti        <-- name
10.95            <-- price
2                <-- linked item id
3                <-- linked item id

1
CATEGORY
Pasta
4
5

2
OPTION
Meatballs
1.00

3
OPTION
Chicken
2.00

5
ENTREE
Lasagna
12.00

6
ENTREE
Caesar Salad
9.75
3

null

2nd Round
Feedback
Help needed to coding part

3 hr heads done coding challenge
Deep Dive. Of code review
Computer fundamentals -> ds , heaps, maps etc.,
 - no need of fully compilable code
- pseudo code is good enough
Architecture
- System design or architecture
- white boarding tool


Prompt with Product requirements prompt will received at the day of interview
Eg:s
Dispatch problem
Pick up orders
Simulation problem

Eng will be only first 15 minutes to clarify question
90 minutes
Valid runnable code
Minimal bugs
good use of DS
concurrency
Unit Test and integration -> at least a single line empty test should be there


Tell if you have done something differently with more time


