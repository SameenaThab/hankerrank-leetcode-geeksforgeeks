meetings room problem  : https://leetcode.com/problems/meeting-rooms-ii/

Wording is different
Input: given chats with start and end times [[c1_start,c1,end],[c2_start,c2,end],[c3_start,c3,end],[c3_start,c3,end]]
Output: give the count of concurrent chats. That is the chats that are  happening at same time => find minimum # of meeting rooms.

Interviewer agreed with the solution

Round 2 Question
Given a String str, find the length of longest substring with almost 2 unique characters
eg: aacccdddddefg output:8 cccddddd is the longest substring with almost 2 unique characters

Check CamblyLongestSubstrWithUniqueCharacters.java
solution : Start with pointer  l=0 and r=0, max = -1, Intitailize Map HashMap<Character, Integer> map 
1- Traverse the string str until r<str.length()
2- For each character in str.charAt(r) insert /update the character and its index in map
3- when map.size > 2 -> breach atmost unique character
    3.1- find the character with the largest index in the map
    3.2- reset  l = map.get(character_with_largest_index)+1;
    3.3- remove the character from the map
4- update max = Math.max(r-l+1,max);
